name: Build Android APK

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # 수동으로 빌드 실행 가능

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          git zip unzip openjdk-17-jdk python3-pip \
          autoconf automake libtool libtool-bin pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo6 \
          cmake libffi-dev libssl-dev \
          build-essential ccache \
          libxml2-dev libxslt1-dev \
          libjpeg-dev libpng-dev \
          m4 gettext autopoint
        
        # libtool 매크로 파일 강제 재생성 및 symlink 생성
        sudo mkdir -p /usr/share/aclocal
        sudo libtoolize --force --install || true
        sudo aclocal --force || true
        sudo ldconfig

    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer cython appdirs colorama jinja2 sh
        pip install pyjnius plyer requests beautifulsoup4
        # buildozer 설정 파일에 autotools 무시 설정 추가
        mkdir -p ~/.buildozer
        echo 'export IGNORE_AUTOTOOLS_ERRORS=1' >> ~/.buildozer/config

    - name: Setup Android SDK
      run: |
        # Android SDK 설치 및 설정
        mkdir -p ~/.buildozer/android/platform
        cd ~/.buildozer/android/platform
        
        # Command line tools 다운로드 및 설치
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip commandlinetools-linux-9477386_latest.zip
        mkdir -p android-sdk/cmdline-tools
        rm -rf android-sdk/cmdline-tools/latest
        mv cmdline-tools android-sdk/cmdline-tools/latest
        
        # tools/bin 디렉토리 생성 및 sdkmanager 링크 생성
        mkdir -p android-sdk/tools/bin
        # 기존 심볼릭 링크가 있으면 제거하고 새로 생성
        rm -f android-sdk/tools/bin/sdkmanager
        ln -s ../../cmdline-tools/latest/bin/sdkmanager android-sdk/tools/bin/sdkmanager
        
        # 환경 변수 설정
        export ANDROID_SDK_ROOT=~/.buildozer/android/platform/android-sdk
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        
        # 라이선스 허용
        mkdir -p $ANDROID_SDK_ROOT/licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        
        # 필요한 SDK 컴포넌트 설치
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-28" "build-tools;28.0.3" "platform-tools"

    - name: Build APK
      run: |
        export ANDROID_SDK_ROOT=~/.buildozer/android/platform/android-sdk
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
        export ACLOCAL_PATH="/usr/share/aclocal"
        export AUTOMAKE_OPTIONS="foreign"
        export AUTOCONF_VERSION="2.71"
        export LIBTOOL_VERSION="2.4.6"
        export M4PATH="/usr/share/aclocal:$M4PATH"
        
        # autotools 오류 무시 설정
        export IGNORE_AUTOTOOLS_ERRORS=1
        export AUTORECONF_FLAGS="--install --force"
        
        # Python 경로 명시적 설정
        export PYTHONPATH="/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages:$PYTHONPATH"
        
        # 빌드 시도
        echo "Starting buildozer build..."
        echo "=== Buildozer 환경 확인 ==="
        buildozer --version || echo "Buildozer version check failed"
        
        echo "=== 빌드 시작 ==="
        set -e  # 오류 발생 시 즉시 중단
        buildozer android debug --verbose 2>&1 | tee build.log
        
        echo "=== 빌드 성공 확인 ==="
        if [ -f "build.log" ]; then
          echo "Build log size: $(wc -l < build.log) lines"
          echo "Last 20 lines of build log:"
          tail -20 build.log
        fi
      env:
        ANDROIDAPI: "28"
        ANDROIDMINAPI: "21"

    - name: Find APK files
      run: |
        echo "=== 전체 시스템에서 APK 파일 검색 ==="
        find . -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK files found"
        
        echo "=== buildozer 디렉토리 구조 확인 ==="
        find .buildozer -type f -name "*.apk" 2>/dev/null || echo "No APK in .buildozer"
        
        echo "=== bin 디렉토리 확인 ==="
        ls -la bin/ 2>/dev/null || echo "bin directory not found"
        
        echo "=== dist 디렉토리 확인 ==="
        find . -path "*/dist*" -name "*.apk" -type f 2>/dev/null || echo "No APK in dist directories"
        
        echo "=== outputs 디렉토리 확인 ==="
        find . -path "*outputs*" -name "*.apk" -type f 2>/dev/null || echo "No APK in outputs directories"
        
        echo "=== 일반적인 Android 빌드 경로 확인 ==="
        find . -path "*build/outputs/apk*" -name "*.apk" -type f 2>/dev/null || echo "No APK in Android build outputs"
        
        echo "=== 현재 디렉토리 구조 확인 ==="
        ls -la
        
        echo "=== buildozer 설정 확인 ==="
        if [ -f "buildozer.spec" ]; then
          echo "bin_dir setting:"
          grep -E "^bin_dir|^#.*bin_dir" buildozer.spec || echo "No bin_dir setting found"
        fi
        
    - name: Collect APK files
      run: |
        echo "=== APK 파일 수집 ==="
        mkdir -p bin
        
        # 모든 APK 파일을 찾아서 bin 디렉토리로 복사
        echo "전체 디렉토리에서 APK 파일 검색 중..."
        find . -name "*.apk" -type f -print0 | while IFS= read -r -d '' apk; do
          echo "Found APK: $apk"
          cp "$apk" bin/
        done
        
        echo "=== bin 디렉토리 중간 확인 ==="
        ls -la bin/
        
        # 파일이 없으면 더 적극적으로 검색
        if [ ! -f bin/*.apk ] 2>/dev/null; then
          echo "=== 더 적극적인 APK 검색 ==="
          
          # 모든 가능한 경로 확인
          for dir in .buildozer .gradle build dist bin; do
            if [ -d "$dir" ]; then
              echo "Searching in $dir..."
              find "$dir" -name "*.apk" -type f -exec sh -c 'echo "Found: $1"; cp "$1" bin/' _ {} \; 2>/dev/null || true
            fi
          done
          
          # 특정 패턴으로 검색
          echo "=== 특정 패턴으로 검색 ==="
          find . -name "*debug*.apk" -o -name "*release*.apk" -o -name "*lotto*.apk" | while read apk; do
            if [ -f "$apk" ]; then
              echo "Pattern match: $apk"
              cp "$apk" bin/
            fi
          done
        fi
        
        echo "=== 최종 bin 디렉토리 내용 ==="
        ls -la bin/
        
        # 여전히 없으면 buildozer 로그 확인
        if [ ! -f bin/*.apk ] 2>/dev/null; then
          echo "=== APK 파일을 찾을 수 없음. buildozer 로그에서 경로 확인 ==="
          if [ -f "build.log" ]; then
            echo "APK 관련 로그 검색:"
            grep -i "apk\|\.apk\|build.*output" build.log | tail -20 || echo "No APK references in log"
          fi
          
          echo "=== 전체 디렉토리 구조 (APK 관련만) ==="
          find . -type f -name "*.apk" -o -name "*apk*" | head -50
        fi
        
        # 최종 확인
        apk_count=$(ls -1 bin/*.apk 2>/dev/null | wc -l)
        echo "=== 수집된 APK 파일 수: $apk_count ==="

    - name: Check APK files before upload
      id: check_apk
      run: |
        if ls bin/*.apk 1> /dev/null 2>&1; then
          echo "apk_exists=true" >> $GITHUB_OUTPUT
          echo "APK files found for upload"
        else
          echo "apk_exists=false" >> $GITHUB_OUTPUT
          echo "No APK files found for upload"
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success() && steps.check_apk.outputs.apk_exists == 'true'
      with:
        name: lotto-kivy-debug.apk
        path: bin/*.apk
        retention-days: 30

    - name: Create Release
      if: github.ref == 'refs/heads/master' && success() && steps.check_apk.outputs.apk_exists == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: 로또 생성기 v${{ github.run_number }}
        body: |
          🎰 6/45 로또 생성기 Android APK
          
          ### 주요 기능
          - 17가지 로또 번호 생성 알고리즘
          - 과거 당첨번호 조회 및 분석
          - 자동 데이터 업데이트
          - 한글 폰트 지원
          
          ### 설치 방법
          1. APK 파일 다운로드
          2. 안드로이드 기기에서 "알 수 없는 소스" 허용
          3. APK 파일 설치
          
          빌드 번호: ${{ github.run_number }}
          빌드 날짜: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false
        files: bin/*.apk
        token: ${{ secrets.GITHUB_TOKEN }}